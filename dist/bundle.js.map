{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC3SgD;AAChD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAAc;AAClC;AACA;AACA,oBAAoB,8DAAc;AAClC;AACA;AACA,oBAAoB,8DAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCpEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACoE;;;AAGpE;AACA,cAAc;AACd,eAAe;AACf;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA,2CAA2C,0DAAiB;AAC5D,6CAA6C,2DAAkB;AAC/D,+C","sources":["webpack://4-course/./src/cartListData.js","webpack://4-course/./src/mainScreen.js","webpack://4-course/webpack/bootstrap","webpack://4-course/webpack/runtime/define property getters","webpack://4-course/webpack/runtime/hasOwnProperty shorthand","webpack://4-course/webpack/runtime/make namespace object","webpack://4-course/./src/index.js"],"sourcesContent":["export function renderCardList(cardListNumber) {\r\n    const cards_container = document.querySelector('.container')\r\n\r\n    const cardListData = [\r\n        {\r\n            id: 'spades-6',\r\n            name: 'spades 6',\r\n            image: './static/img/6p.png',\r\n        },\r\n        {\r\n            id: 'spades-7',\r\n            name: 'spades 7',\r\n            image: './static/img/7p.png',\r\n        },\r\n        {\r\n            id: 'spades-8',\r\n            name: 'spades 8',\r\n            image: './static/img/8p.png',\r\n        },\r\n        {\r\n            id: 'spades-9',\r\n            name: 'spades 9',\r\n            image: './static/img/9p.png',\r\n        },\r\n        {\r\n            id: 'spades-10',\r\n            name: 'spades 10',\r\n            image: './static/img/10p.png',\r\n        },\r\n        {\r\n            id: 'spades-j',\r\n            name: 'spades j',\r\n            image: './static/img/jp.png',\r\n        },\r\n        {\r\n            id: 'spades-q',\r\n            name: 'spades q',\r\n            image: './static/img/qp.png',\r\n        },\r\n        {\r\n            id: 'spades-k',\r\n            name: 'spades k',\r\n            image: './static/img/kp.png',\r\n        },\r\n        {\r\n            id: 'spades-a',\r\n            name: 'spades a',\r\n            image: './static/img/ap.png',\r\n        },\r\n        {\r\n            id: 'hearts-6',\r\n            name: 'hearts 6',\r\n            image: './static/img/6c.png',\r\n        },\r\n        {\r\n            id: 'hearts-7',\r\n            name: 'hearts 7',\r\n            image: './static/img/7c.png',\r\n        },\r\n        {\r\n            id: 'hearts-8',\r\n            name: 'hearts 8',\r\n            image: './static/img/8c.png',\r\n        },\r\n        {\r\n            id: 'hearts-9',\r\n            name: 'hearts 9',\r\n            image: './static/img/9c.png',\r\n        },\r\n        {\r\n            id: 'hearts-10',\r\n            name: 'hearts 10',\r\n            image: './static/img/10c.png',\r\n        },\r\n        {\r\n            id: 'hearts-j',\r\n            name: 'hearts j',\r\n            image: './static/img/jc.png',\r\n        },\r\n        {\r\n            id: 'hearts-q',\r\n            name: 'hearts q',\r\n            image: './static/img/qc.png',\r\n        },\r\n        {\r\n            id: 'hearts-k',\r\n            name: 'hearts k',\r\n            image: './static/img/kc.png',\r\n        },\r\n        {\r\n            id: 'hearts-a',\r\n            name: 'hearts a',\r\n            image: './static/img/ac.png',\r\n        },\r\n\r\n        {\r\n            id: 'diamonds-6',\r\n            name: 'diamonds 6',\r\n            image: './static/img/6b.png',\r\n        },\r\n        {\r\n            id: 'diamonds-7',\r\n            name: 'diamonds 7',\r\n            image: './static/img/7b.png',\r\n        },\r\n        {\r\n            id: 'diamonds-8',\r\n            name: 'diamonds 8',\r\n            image: './static/img/8b.png',\r\n        },\r\n        {\r\n            id: 'diamonds-9',\r\n            name: 'diamonds 9',\r\n            image: './static/img/9b.png',\r\n        },\r\n        {\r\n            id: 'diamonds-10',\r\n            name: 'diamonds 10',\r\n            image: './static/img/10b.png',\r\n        },\r\n        {\r\n            id: 'diamonds-j',\r\n            name: 'diamonds j',\r\n            image: './static/img/jb.png',\r\n        },\r\n        {\r\n            id: 'diamonds-q',\r\n            name: 'diamonds q',\r\n            image: './static/img/qb.png',\r\n        },\r\n        {\r\n            id: 'diamonds-k',\r\n            name: 'diamonds k',\r\n            image: './static/img/kb.png',\r\n        },\r\n        {\r\n            id: 'diamonds-a',\r\n            name: 'diamonds a',\r\n            image: './static/img/ab.png',\r\n        },\r\n        {\r\n            id: 'clubs-6',\r\n            name: 'clubs 6',\r\n            image: './static/img/6k.png',\r\n        },\r\n        {\r\n            id: 'clubs-7',\r\n            name: 'clubs 7',\r\n            image: './static/img/7k.png',\r\n        },\r\n        {\r\n            id: 'clubs-8',\r\n            name: 'clubs 8',\r\n            image: './static/img/8k.png',\r\n        },\r\n        {\r\n            id: 'clubs-9',\r\n            name: 'clubs 9',\r\n            image: './static/img/9k.png',\r\n        },\r\n        {\r\n            id: 'clubs-10',\r\n            name: 'clubs 10',\r\n            image: './static/img/10k.png',\r\n        },\r\n        {\r\n            id: 'clubs-j',\r\n            name: 'clubs j',\r\n            image: './static/img/jk.png',\r\n        },\r\n        {\r\n            id: 'clubs-q',\r\n            name: 'clubs q',\r\n            image: './static/img/qk.png',\r\n        },\r\n        {\r\n            id: 'clubs-k',\r\n            name: 'clubs k',\r\n            image: './static/img/kk.png',\r\n        },\r\n        {\r\n            id: 'clubs-a',\r\n            name: 'clubs a',\r\n            image: './static/img/ak.png',\r\n        }\r\n    ]\r\n\r\n    shuffle(cardListData);\r\n// Возвращаем новый массив элементов, который будет содержать от 0 до указанного количества карт\r\n    const cardList = cardListData.slice(0, cardListNumber)\r\n    const duplicateCardsArray = duplicateArray(cardList); \r\n    shuffle(duplicateCardsArray);\r\n    // Для каждого элемента массива будет создан div \r\n    duplicateCardsArray.forEach((card) => {\r\n        const cardElement = document.createElement('div')\r\n        cardElement.classList.add('memory-card')\r\n        cardElement.classList.add('flip')\r\n        //Создаем элемент img и указываем атрибуты\r\n        const imgElement = document.createElement('img')\r\n        //Задаем атрибуты для игоровой карточки\r\n        imgElement.setAttribute('src', card.image)\r\n        imgElement.setAttribute('alt', card.name)\r\n        imgElement.setAttribute('class', 'front-face')\r\n        cardElement.setAttribute('data-framework', `${card.name}`)\r\n        const imgElementBack = document.createElement('img')\r\n        imgElementBack.setAttribute('src', './static/img/back.png')\r\n        imgElementBack.setAttribute('alt', 'backSide')\r\n        imgElementBack.setAttribute('class', 'back-face')\r\n        // Добавляем элемент в div с классом card\r\n        \r\n        cardElement.appendChild(imgElement)\r\n        cardElement.appendChild(imgElementBack)\r\n       \r\n        // Добавляем элемент div с классом card на освной экран с контейнер\r\n        cards_container.appendChild(cardElement)\r\n    })\r\n\r\n    const cards = document.querySelectorAll('.memory-card');\r\n    \r\n    setTimeout(() => {\r\n        cards.forEach((cards) => {\r\n            cards.classList.remove('flip')\r\n        })\r\n\r\n        let hasFlippedCard = false;\r\n        let lockBoard = false;\r\n        let firstCard, secondCard;\r\n      \r\n        function flipCard() {\r\n             \r\n        if (lockBoard) return;\r\n        if (this === firstCard) return;\r\n      \r\n            this.classList.add('flip');\r\n      \r\n        if (!hasFlippedCard) {\r\n            hasFlippedCard = true;\r\n            firstCard = this;\r\n            return;\r\n          }\r\n      \r\n          secondCard = this;\r\n      \r\n          checkForMatch();\r\n        }\r\n      \r\n        function checkForMatch() {\r\n          let isMatch = firstCard.dataset.framework === secondCard.dataset.framework;\r\n          isMatch ? disableCards() : unflipCards();\r\n        }\r\n      \r\n        function disableCards() {\r\n          firstCard.removeEventListener('click', flipCard);\r\n          secondCard.removeEventListener('click', flipCard);\r\n      \r\n          resetBoard();\r\n        }\r\n      \r\n        function unflipCards() {\r\n          lockBoard = true;\r\n      \r\n          setTimeout(() => {\r\n            \r\n            firstCard.classList.remove('flip');\r\n            secondCard.classList.remove('flip');\r\n            alert('Вы проиграли')\r\n            lockBoard = true;\r\n            \r\n          }, 1500);\r\n\r\n          \r\n        }\r\n      \r\n       function resetBoard() {\r\n         [hasFlippedCard, lockBoard] = [false, false];\r\n         [firstCard, secondCard] = [null, null];\r\n       }\r\n\r\n      \r\n        cards.forEach(card => card.addEventListener('click', flipCard));\r\n      }, 5000);\r\n}\r\n\r\nconst shuffle = (array) => {\r\n    let currentIndex = array.length,\r\n        randomIndex;\r\n    while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex],\r\n            array[currentIndex],\r\n        ];\r\n    }\r\n    return array;\r\n};\r\n\r\nconst duplicateArray = (array) =>\r\n    array.reduce((res, current) => res.concat([current, current]), []);\r\n\r\n","import { renderCardList } from './cartListData';\r\n\r\nexport function renderBlockChoice(levelContent) {\r\n    const buttonName = [1, 2, 3]\r\n    buttonName.forEach((elements) => {\r\n        const buttonLevels = document.createElement('input')\r\n        buttonLevels.setAttribute('type', 'radio')\r\n        buttonLevels.setAttribute('value', elements)\r\n        buttonLevels.setAttribute('id', elements)\r\n        buttonLevels.setAttribute('name', 'group-button')\r\n        buttonLevels.classList.add('input', 'button')\r\n\r\n        const buttonLabel = document.createElement('label')\r\n        buttonLabel.setAttribute('for', elements)\r\n        buttonLabel.classList.add('button-label')\r\n        buttonLabel.textContent = elements\r\n \r\n        levelContent.appendChild(buttonLevels)\r\n        levelContent.appendChild(buttonLabel)\r\n        \r\n    })\r\n}\r\n\r\nexport function renderScreenChoice() {\r\n    const APP_CONTAINER = document.querySelector('.app')\r\n    const title = document.createElement('h1')\r\n    title.classList.add('title')\r\n    title.textContent = 'Выбери сложность'\r\n\r\n    const levelContent = document.createElement('div')\r\n    levelContent.classList.add('level-content')\r\n\r\n    const ButtonStart = document.createElement('button')\r\n    ButtonStart.classList.add('button-start', 'button')\r\n    ButtonStart.textContent = 'Старт'\r\n    ButtonStart.addEventListener('click', gameStart)\r\n    \r\n    APP_CONTAINER.appendChild(title)\r\n    window.application.renderBlock('blockChoice', levelContent)\r\n    APP_CONTAINER.appendChild(levelContent)\r\n    APP_CONTAINER.appendChild(ButtonStart)\r\n    \r\n}\r\n\r\nfunction gameStart() {\r\n        const APP_CONTAINER = document.querySelector('.app')\r\n        const button = document.querySelectorAll('.button')\r\n        const ButtonStart = document.querySelector('.button-start')\r\n    for (const control of button) {\r\n        if (control.checked === true) {\r\n            window.application.levels = control.value\r\n            APP_CONTAINER.innerHTML = ''\r\n            APP_CONTAINER.classList.add('hide')\r\n            switch (window.application.levels) {\r\n                case '1':\r\n                    renderCardList(3)\r\n                    break\r\n                case '2':\r\n                    renderCardList(12)\r\n                    break\r\n                case '3':\r\n                    renderCardList(18)\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n    }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import './src/css/style.css';\nimport { renderBlockChoice,renderScreenChoice } from './mainScreen';\n\n\nwindow.application = {\n    blocks: {},\n    screens: {},\n    renderScreen: function (screenName) {\n        this.screens[screenName]()\n    },\n    renderBlock: function (blockName, container) {\n        this.blocks[blockName](container)\n    },\n    levels: [],\n}\n\nwindow.application.blocks['blockChoice'] = renderBlockChoice\nwindow.application.screens['screenChoice'] = renderScreenChoice\nwindow.application.renderScreen('screenChoice')"],"names":[],"sourceRoot":""}